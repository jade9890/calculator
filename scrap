#include <math.h>  //C Standard Library for math functions
#include <stdio.h> //C Standard Library for input/output functions

// 5 memory slots
float a = 0.00;
float b = 0.00;
float c = 0.00;
float d = 0.00;
float e = 0.00;

//declare functions

void display_welcome_message();
void display_options();
void display_exit_message();

float binary_operations();
float unary_operations();
float advanced_operations();
float variables();

float binary_advanced();
float unary_advanced();

int main(){

char option;

display_welcome_message();

while (1) {
display_options();
scanf( "%c", &option);
 // use if, else statement for check whether or not the user inputted E
    if (option != 'E') {

      // use switch statement to make cases for each option
      switch (option) {
        case 'B':
          binary_operations();
          break;
        case 'U':
          unary_operations();
          break;
        case 'A':
          advanced_operations();
          break;
        case 'V':
          variables();
          break;
        default:
          printf("invalid option. Try again.\n");
          break;       
        case 'E':
          printf("Returning to main menu.\n");
          break;
        }
      // if the user inputs E, the loop and the program will end
    } 
    else {
           display_exit_message();
          return 0;
    }
  }
}

    void display_welcome_message(){

      printf("Welcome to my Command-Line Calculator (CLC)\n");
      printf("Developer: Jade Luong\n");
      printf("Version: Assignment 1 \n");
      printf("Date: February 12, 2024\n\n");

      // display menu

    }

    void display_options(){

      printf("Select one of the following items:\n");
      printf("B) - Binary Mathematical Operations, such as addition and "
             "subtraction.\n");
      printf("U) - Unary Mathematical Operations, such as square root, and log.\n");
      printf("A) - Advances Mathematical Operations, using variables, arrays.\n");
      printf("V) â€“ Define variables and assign them values.\n");
      printf("E) - Exit.\n");

    }

    float binary_operations(){

      float num1, num2, result = 0;
      char op;
      char slot; // stores input for memory slot
      char v = 0; // Variable to store user input character in option A
      int s = 0; // Set flag value to false initially

      // tell user to enter the first floating point number
      do{

      printf("Please enter a floating point number or a memory slot (a, b, c, d, e):\n");

        // If input from user returns 1 in scanf that means a
        // float was read successfully which is stored in
        // variable vf
        if (scanf(" %f", &num1) == 1) {
          s = 1; // Change flag value to true
        }        // End of if statement

        else {

          scanf(" %c", &v); // Stores user input as character

          switch (v) { // Cases to execute code depending on character
                       // entered by user

          case 'a':
            num1 = a; // If a is entered by the user store
                      //value of a in Num1
            s = 1; // Change flag value to true
            break; // Exit case a

          case 'b':
            num1 = b; // If b is entered by the user store 
                      // value of b in Num1
            s = 1; // Change flag value to true
            break; // Exit case b

          case 'c':
            num1 = c; // If c is entered by the user store 
                      // value of c in Num1
            s = 1; // Change flag value to true
            break; // Exit case c

          case 'd':
            num1 = d; // If d is entered by the user store 
                      // value of d in Num1
            s = 1; // Change flag value to true
            break; // Exit case d

          case 'e':
            num1 = e; // If e is entered by the user store 
                      // value of e in Num1
            s = 1; // Change flag value to true
            break; // Exit case e

          default:
            printf(
                "Invalid input\n"); //if it's neither a f
                                    //loating point or memory

            s = 0; // Change flag value to false
            break; // Exit break case
          }        // End cases

        }               // End of else statement
      } while (s == 0); // Loops code while flag is false
      //tell user to enter an operation

      printf("Please enter the operation ( + , - , * , / , %% , P , X , I  )\n");
      scanf(" %c", &op); // to consume leading whitespace

      //check if the operation is valid using a while loop
      while (op != '+' && op != '-' && op != '*' && op != '/' && op != '%' && op != 'P' && op != 'X' && op != 'I') {
          printf("Invalid operation\n");
          printf("Please enter the operation ( + , - , * , / , %% , P , X , "
                 "I  )\n");
          scanf(" %c", &op);
        } 

      // tell user to enter the 2nd floating point number
      do { // Do while loop
        // tell user to enter the second floating point
        // number or memory slot


        printf("Please enter a floating point number or a memory slot (a, b, c, d, e):\n");

        // If input from user returns 1 in scanf that means a
        // float was read successfully which is stored in
        // variable vf
        if (scanf(" %f", &num2) == 1) {
          s = 1; // Change flag value to true
        }        // End of if statement

        else {

          scanf(" %c", &v); // Stores user input as character

          switch (v) { // Cases to execute code depending on character
                       // entered by user

          case 'a':
            num2 = a; // If a is entered by the user store 
                      // value of a in Num1
            s = 1; // Change flag value to true
            break; // Exit case a

          case 'b':
            num2 = b; // If b is entered by the user store 
                      // value of b in Num1
            s = 1; // Change flag value to true
            break; // Exit case b

          case 'c':
            num2 = c; // If c is entered by the user store 
                      // value of c in Num1
            s = 1; // Change flag value to true
            break; // Exit case c

          case 'd':
            num2 = d; // If d is entered by the user store 
                      // value of d in Num1
            s = 1; // Change flag value to true
            break; // Exit case d

          case 'e':
            num2 = e; // If e is entered by the user store  
                      // value of e in Num1
            s = 1; // Change flag value to true
            break; // Exit case e

          default:
            printf(
                "Invalid input\n"); //if it's neither a floating point or memory

            s = 0; // Change flag value to false
            break; // Exit break case
          }        // End cases

        }               // End of else statement
      } while (s == 0); // Loops code while flag is false


      // use switch statement to check the operation the user inputted, make
      // cases for each operation

      switch (op) {

      // use case '+' to add the 2 numbers and put the answer into the
      // variable result add break at the end of each case to end processing
      // of the case
      case '+':
        result = num1 + num2;
        printf("The result is %.2f\n", result);
        break;

        // use case '-' to subtract the 2 numbers and put the answer into the
        // variable result

      case '-':
        result = num1 - num2;
        printf("The result is %.2f\n", result);
        break;

        // use case '*' to multiply the 2 numbers and put the answer into the
        // variable result

      case '*':
        result = num1 * num2;
        printf("The result is %.2f\n", result);
        break;

      /*use if, else statement to check whether or not the user inputted 0 for
      num2, since dividing anything by 0 will result in an error

      if user did not input 0, use case '/' to divide the 2 numbers and put
      the answer into the variable result If the user inputted 0, display the
      following text: "Denominator cannot be 0"
      */
      case '/':
        if (num2 != 0) {
          result = num1 / num2;
          printf("The result is %.2f\n", result);
        } else {
          printf("Denominator cannot be 0. Try again.\n");
        }
        break;

        // use case '%' to find the remainder of the 2 numbers and put the
        // answer into the variable result

      case '%':
        result = fmod(num1, num2);
        printf("The result is %.2f\n", result);
        break;

        // use case 'P' to find the power of the 2 numbers and put the answer
        // into the variable result

      case 'P':
        result = pow(num1, num2);
        printf("The result is %.2f\n", result);
        break;

        // use case 'X' to find the maximum of the 2 numbers and put the
        // answer into the variable result

      case 'X':
        result = (num1 > num2) ? num1 : num2;
        printf("The maximum is %.2f\n", result);
        break;

        // use case 'I' to find the minimum of the 2 numbers and put the
        // answer into the variable result

      case 'I':
        result = (num1 < num2) ? num1 : num2;
        printf("The minimum is %.2f\n", result);
        break;

        // add a default in case the user inputs an invalid option

      default:
        printf("Invalid operator\n");
        break;

      }
      return result;
    }

    float unary_operations(){

      float num1, result = 0;
      char op;
      char slot; // stores input for memory slot
      char v = 0; // Variable to store user input character in option A
      int s = 0; // Set flag value to false initially
      // get an operator from user
      printf("Please enter an operator: (S, L, E, C, F)\n");
      scanf(" %c", &op);

      // use while loop to check if the user inputted a valid operator

      while (op != 'S' && op != 'L' && op != 'E' && op != 'C' && op != 'F') {
          printf("Invalid operation\n");
          printf("Please enter an operator: (S, L, E, C, F)\n");
          scanf(" %c", &op);
        }

      // tell user to enter the first floating point number
      do{
      printf("Please enter a floating point number or a memory slot (a, b, c, d, e):\n");

        // If input from user returns 1 in scanf that means a
        // float was read successfully which is stored in
        // variable vf
        if (scanf(" %f", &num1) == 1) {
          s = 1; // Change flag value to true
        }        // End of if statement

        else {

          scanf(" %c", &v); // Stores user input as character

          switch (v) { // Cases to execute code depending on character
                       // entered by user

          case 'a':
            num1 = a; // If a is entered by the user store
                      //value of a in Num1
            s = 1; // Change flag value to true
            break; // Exit case a

          case 'b':
            num1 = b; // If b is entered by the user store 
                      // value of b in Num1
            s = 1; // Change flag value to true
            break; // Exit case b

          case 'c':
            num1 = c; // If c is entered by the user store 
                      // value of c in Num1
            s = 1; // Change flag value to true
            break; // Exit case c

          case 'd':
            num1 = d; // If d is entered by the user store 
                      // value of d in Num1
            s = 1; // Change flag value to true
            break; // Exit case d

          case 'e':
            num1 = e; // If e is entered by the user store 
                      // value of e in Num1
            s = 1; // Change flag value to true
            break; // Exit case e

          default:
            printf(
                "Invalid input\n"); //if it's neither a f
                                    //loating point or memory

            s = 0; // Change flag value to false
            break; // Exit break case
          }        // End cases

        }               // End of else statement
      } while (s == 0); // Loops code while flag is false
      // use switch statement and make cases for each operation

      switch (op) {

      // use case 'S' to square root the number and put the answer into the
      // variable result
      case 'S':
        result = sqrt(num1);
        printf("The square root is %.2f\n", result);
        break;

        // use case 'L' to log the number and put the answer into the variable
        // result
      case 'L':
        result = log(num1);
        printf("The logarithm is %.2f\n", result);
        break;

        // use case 'E' to exponentiate the number and put the answer into the
        // variable result

      case 'E':
        result = exp(num1);
        printf("The exponentiation is %.2f\n", result);
        break;

        // use case 'C' to ceil the number and put the answer into the
        // variable result

      case 'C':
        result = ceil(num1);
        printf("The ceiling is %.2f\n", result);
        break;

        // use case 'F' to floor the number and put the answer into the
        // variable result

      case 'F':
        result = floor(num1);
        printf("The floor is %.2f\n", result);
        break;

        // add a default in case the user inputs an invalid option

      default:
        printf("Invalid operator.\n");
        break;
      }

    return result;
  }

    float advanced_operations(){

      char option;

      // display the menu for case A
      printf("Advanced Operations:\n");
      printf("B. Binary Operations with variables\n");
      printf("U. Unary Operations with variables\n");
      printf("E. Exit to Main Menu\n");

      // use a while loop so the user stays in case A until they input E to
      // exit to main menu

      while (1) {

        // ask user to input an option
        printf("Please select your option ( B , U , E )\n");
        scanf(" %c", &option);
        getchar();

        // use switch statement to make cases for each option
        switch (option) {
        case 'B':
          binary_advanced();
          break;
          case 'U':
          unary_advanced();
          break;

        case 'E':
          printf("Returning to main menu.\n");
          break;

        // add a default in case user inputs an invalid option
        default:
          printf("Invalid option.\n");
          break;
        }

      if (option == 'E') {
        break;
        }
      }
    }

    float variables(){
      char slot;
      printf("Enter memory slot (a/b/c/d/e): ");
        scanf(" %c", &slot); // reads memory slot input

        while (slot < 'a' || slot > 'e') {
          printf("Invalid memory slot. Try again.\n");
          scanf(" %c", &slot);
        } 

        // Update memory slot with what the user inputted
        switch (slot) {
        case 'a':
          printf("Enter the value for memory slot a: ");
          scanf(" %f", &a);
          break;
        case 'b':
          printf("Enter the value for memory slot b: ");
          scanf(" %f", &b);
          break;
        case 'c':
          printf("Enter the value for memory slot c: ");
          scanf(" %f", &c);
          break;
        case 'd':
          printf("Enter the value for memory slot d: ");
          scanf(" %f", &d);
          break;
        case 'e':
          printf("Enter the value for memory slot e: ");
          scanf(" %f", &e);
          break;
        default:
          printf("Invalid memory slot\n");
          break;
        }
      }




















